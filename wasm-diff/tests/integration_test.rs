use std::process::Command;use std::io::Write;use std::fs;#[test]fn test_diff_basic(){    let file1_content = "line1
line2
line3";    let file2_content = "line1
changed_line2
line3";    let file1_path = "test_diff_file1.txt";    let file2_path = "test_diff_file2.txt";    fs::File::create(file1_path).unwrap().write_all(file1_content.as_bytes()).unwrap();    fs::File::create(file2_path).unwrap().write_all(file2_content.as_bytes()).unwrap();    let output = Command::new("cargo")        .arg("run")        .arg("--")        .arg(file1_path)        .arg(file2_path)        .output()        .expect("Failed to execute command");    assert!(output.status.success());    let stdout = String::from_utf8_lossy(&output.stdout);    assert!(stdout.contains("< 2	line2"));    assert!(stdout.contains("> 2	changed_line2"));    assert!(!stdout.contains("line1"));     assert!(!stdout.contains("line3"));     fs::remove_file(file1_path).unwrap();    fs::remove_file(file2_path).unwrap();}#[test]fn test_diff_missing_line(){    let file1_content = "line1
line2
line3";    let file2_content = "line1
line3";    let file1_path = "test_diff_missing_file1.txt";    let file2_path = "test_diff_missing_file2.txt";    fs::File::create(file1_path).unwrap().write_all(file1_content.as_bytes()).unwrap();    fs::File::create(file2_path).unwrap().write_all(file2_content.as_bytes()).unwrap();    let output = Command::new("cargo")        .arg("run")        .arg("--")        .arg(file1_path)        .arg(file2_path)        .output()        .expect("Failed to execute command");    assert!(output.status.success());    let stdout = String::from_utf8_lossy(&output.stdout);    assert!(stdout.contains("< 2	line2"));    assert!(!stdout.contains("> 2"));     fs::remove_file(file1_path).unwrap();    fs::remove_file(file2_path).unwrap();}